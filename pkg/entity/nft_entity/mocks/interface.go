// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/entity/nft_entity/interface.go

// Package mock_nftentity is a generated GoMock package.
package mock_nftentity

import (
	reflect "reflect"

	model "github.com/consolelabs/indexer-api/pkg/model"
	request "github.com/consolelabs/indexer-api/pkg/request"
	response "github.com/consolelabs/indexer-api/pkg/response"
	gomock "github.com/golang/mock/gomock"
)

// MockINftEntity is a mock of INftEntity interface.
type MockINftEntity struct {
	ctrl     *gomock.Controller
	recorder *MockINftEntityMockRecorder
}

// MockINftEntityMockRecorder is the mock recorder for MockINftEntity.
type MockINftEntityMockRecorder struct {
	mock *MockINftEntity
}

// NewMockINftEntity creates a new mock instance.
func NewMockINftEntity(ctrl *gomock.Controller) *MockINftEntity {
	mock := &MockINftEntity{ctrl: ctrl}
	mock.recorder = &MockINftEntityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINftEntity) EXPECT() *MockINftEntityMockRecorder {
	return m.recorder
}

// GetCollectionMetadata mocks base method.
func (m *MockINftEntity) GetCollectionMetadata(collectionAddress string) (*model.NftCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionMetadata", collectionAddress)
	ret0, _ := ret[0].(*model.NftCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCollectionMetadata indicates an expected call of GetCollectionMetadata.
func (mr *MockINftEntityMockRecorder) GetCollectionMetadata(collectionAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionMetadata", reflect.TypeOf((*MockINftEntity)(nil).GetCollectionMetadata), collectionAddress)
}

// GetNftCollectionTickers mocks base method.
func (m *MockINftEntity) GetNftCollectionTickers(address string, query request.GetNftTickersRequest) (*response.NftCollectionTickersData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftCollectionTickers", address, query)
	ret0, _ := ret[0].(*response.NftCollectionTickersData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNftCollectionTickers indicates an expected call of GetNftCollectionTickers.
func (mr *MockINftEntityMockRecorder) GetNftCollectionTickers(address, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftCollectionTickers", reflect.TypeOf((*MockINftEntity)(nil).GetNftCollectionTickers), address, query)
}

// GetNftCollections mocks base method.
func (m *MockINftEntity) GetNftCollections(query request.GetNftCollectionsRequest) ([]model.NftCollection, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftCollections", query)
	ret0, _ := ret[0].([]model.NftCollection)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNftCollections indicates an expected call of GetNftCollections.
func (mr *MockINftEntityMockRecorder) GetNftCollections(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftCollections", reflect.TypeOf((*MockINftEntity)(nil).GetNftCollections), query)
}

// GetNftMetadataAttributesIcon mocks base method.
func (m *MockINftEntity) GetNftMetadataAttributesIcon(req request.GetNftAttributeIconQuery) (*response.NftMetadataAttributesIconResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftMetadataAttributesIcon", req)
	ret0, _ := ret[0].(*response.NftMetadataAttributesIconResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNftMetadataAttributesIcon indicates an expected call of GetNftMetadataAttributesIcon.
func (mr *MockINftEntityMockRecorder) GetNftMetadataAttributesIcon(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftMetadataAttributesIcon", reflect.TypeOf((*MockINftEntity)(nil).GetNftMetadataAttributesIcon), req)
}

// GetNftSoulBound mocks base method.
func (m *MockINftEntity) GetNftSoulBound(collectionAddress string) ([]model.NftTokenAttrSoulBound, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftSoulBound", collectionAddress)
	ret0, _ := ret[0].([]model.NftTokenAttrSoulBound)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNftSoulBound indicates an expected call of GetNftSoulBound.
func (mr *MockINftEntityMockRecorder) GetNftSoulBound(collectionAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftSoulBound", reflect.TypeOf((*MockINftEntity)(nil).GetNftSoulBound), collectionAddress)
}

// GetNftTokenTickers mocks base method.
func (m *MockINftEntity) GetNftTokenTickers(collectionAddress, tokenID string, req request.GetNftTickersRequest) (*response.NftTokenTickersData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftTokenTickers", collectionAddress, tokenID, req)
	ret0, _ := ret[0].(*response.NftTokenTickersData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNftTokenTickers indicates an expected call of GetNftTokenTickers.
func (mr *MockINftEntityMockRecorder) GetNftTokenTickers(collectionAddress, tokenID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftTokenTickers", reflect.TypeOf((*MockINftEntity)(nil).GetNftTokenTickers), collectionAddress, tokenID, req)
}

// GetNftTokenTransactionHistory mocks base method.
func (m *MockINftEntity) GetNftTokenTransactionHistory(collectionAddress, tokenId string) ([]model.NftTxHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftTokenTransactionHistory", collectionAddress, tokenId)
	ret0, _ := ret[0].([]model.NftTxHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNftTokenTransactionHistory indicates an expected call of GetNftTokenTransactionHistory.
func (mr *MockINftEntityMockRecorder) GetNftTokenTransactionHistory(collectionAddress, tokenId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftTokenTransactionHistory", reflect.TypeOf((*MockINftEntity)(nil).GetNftTokenTransactionHistory), collectionAddress, tokenId)
}

// GetNftTokens mocks base method.
func (m *MockINftEntity) GetNftTokens(address string, query request.GetNftTokensRequest) ([]model.NftToken, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftTokens", address, query)
	ret0, _ := ret[0].([]model.NftToken)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNftTokens indicates an expected call of GetNftTokens.
func (mr *MockINftEntityMockRecorder) GetNftTokens(address, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftTokens", reflect.TypeOf((*MockINftEntity)(nil).GetNftTokens), address, query)
}

// GetNftTokensByWalletAddress mocks base method.
func (m *MockINftEntity) GetNftTokensByWalletAddress(walletAddress string, query request.GetNftTokensByAddressRequest) ([]model.NftToken, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftTokensByWalletAddress", walletAddress, query)
	ret0, _ := ret[0].([]model.NftToken)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNftTokensByWalletAddress indicates an expected call of GetNftTokensByWalletAddress.
func (mr *MockINftEntityMockRecorder) GetNftTokensByWalletAddress(walletAddress, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftTokensByWalletAddress", reflect.TypeOf((*MockINftEntity)(nil).GetNftTokensByWalletAddress), walletAddress, query)
}

// GetNftTradingVolume mocks base method.
func (m *MockINftEntity) GetNftTradingVolume() ([]response.NftTradingVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftTradingVolume")
	ret0, _ := ret[0].([]response.NftTradingVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNftTradingVolume indicates an expected call of GetNftTradingVolume.
func (mr *MockINftEntityMockRecorder) GetNftTradingVolume() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftTradingVolume", reflect.TypeOf((*MockINftEntity)(nil).GetNftTradingVolume))
}

// GetTokenActivities mocks base method.
func (m *MockINftEntity) GetTokenActivities(collectionAddress, tokenId string, req request.GetNftTokenActivitiesRequest) ([]*model.NftListing, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenActivities", collectionAddress, tokenId, req)
	ret0, _ := ret[0].([]*model.NftListing)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTokenActivities indicates an expected call of GetTokenActivities.
func (mr *MockINftEntityMockRecorder) GetTokenActivities(collectionAddress, tokenId, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenActivities", reflect.TypeOf((*MockINftEntity)(nil).GetTokenActivities), collectionAddress, tokenId, req)
}

// GetTokenDetail mocks base method.
func (m *MockINftEntity) GetTokenDetail(address, tokenId string) (*model.NftToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenDetail", address, tokenId)
	ret0, _ := ret[0].(*model.NftToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenDetail indicates an expected call of GetTokenDetail.
func (mr *MockINftEntityMockRecorder) GetTokenDetail(address, tokenId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenDetail", reflect.TypeOf((*MockINftEntity)(nil).GetTokenDetail), address, tokenId)
}
