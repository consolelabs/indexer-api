// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/service/chain_data/interface.go

// Package mock_chaindata is a generated GoMock package.
package mock_chaindata

import (
	reflect "reflect"

	model "github.com/consolelabs/indexer-api/pkg/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// GetBlockStatsByChainId mocks base method.
func (m *MockIService) GetBlockStatsByChainId(chainId int64) (*model.BlockStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockStatsByChainId", chainId)
	ret0, _ := ret[0].(*model.BlockStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockStatsByChainId indicates an expected call of GetBlockStatsByChainId.
func (mr *MockIServiceMockRecorder) GetBlockStatsByChainId(chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockStatsByChainId", reflect.TypeOf((*MockIService)(nil).GetBlockStatsByChainId), chainId)
}

// GetEventsByAddressFromStartBlockToBlock mocks base method.
func (m *MockIService) GetEventsByAddressFromStartBlockToBlock(address string, start, to, chainId int64, out chan *model.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByAddressFromStartBlockToBlock", address, start, to, chainId, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetEventsByAddressFromStartBlockToBlock indicates an expected call of GetEventsByAddressFromStartBlockToBlock.
func (mr *MockIServiceMockRecorder) GetEventsByAddressFromStartBlockToBlock(address, start, to, chainId, out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByAddressFromStartBlockToBlock", reflect.TypeOf((*MockIService)(nil).GetEventsByAddressFromStartBlockToBlock), address, start, to, chainId, out)
}

// GetTipOfChain mocks base method.
func (m *MockIService) GetTipOfChain() (*model.TipOfChain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTipOfChain")
	ret0, _ := ret[0].(*model.TipOfChain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTipOfChain indicates an expected call of GetTipOfChain.
func (mr *MockIServiceMockRecorder) GetTipOfChain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTipOfChain", reflect.TypeOf((*MockIService)(nil).GetTipOfChain))
}
