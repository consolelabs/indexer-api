// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/store/nft/interface.go

// Package mock_nft is a generated GoMock package.
package mock_nft

import (
	reflect "reflect"

	model "github.com/consolelabs/indexer-api/pkg/model"
	nft "github.com/consolelabs/indexer-api/pkg/store/nft"
	gomock "github.com/golang/mock/gomock"
)

// MockINft is a mock of INft interface.
type MockINft struct {
	ctrl     *gomock.Controller
	recorder *MockINftMockRecorder
}

// MockINftMockRecorder is the mock recorder for MockINft.
type MockINftMockRecorder struct {
	mock *MockINft
}

// NewMockINft creates a new mock instance.
func NewMockINft(ctrl *gomock.Controller) *MockINft {
	mock := &MockINft{ctrl: ctrl}
	mock.recorder = &MockINftMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINft) EXPECT() *MockINftMockRecorder {
	return m.recorder
}

// DeleteOwnerByCollectionAddressTokenId mocks base method.
func (m *MockINft) DeleteOwnerByCollectionAddressTokenId(collectionAddress, tokenId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOwnerByCollectionAddressTokenId", collectionAddress, tokenId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOwnerByCollectionAddressTokenId indicates an expected call of DeleteOwnerByCollectionAddressTokenId.
func (mr *MockINftMockRecorder) DeleteOwnerByCollectionAddressTokenId(collectionAddress, tokenId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOwnerByCollectionAddressTokenId", reflect.TypeOf((*MockINft)(nil).DeleteOwnerByCollectionAddressTokenId), collectionAddress, tokenId)
}

// GetAllMarketplacePlatform mocks base method.
func (m *MockINft) GetAllMarketplacePlatform() ([]model.MarketplacePlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMarketplacePlatform")
	ret0, _ := ret[0].([]model.MarketplacePlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMarketplacePlatform indicates an expected call of GetAllMarketplacePlatform.
func (mr *MockINftMockRecorder) GetAllMarketplacePlatform() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMarketplacePlatform", reflect.TypeOf((*MockINft)(nil).GetAllMarketplacePlatform))
}

// GetAttributeByCollectionAddressTokenID mocks base method.
func (m *MockINft) GetAttributeByCollectionAddressTokenID(collectionAddress, tokenID string) ([]model.NftTokenAttribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributeByCollectionAddressTokenID", collectionAddress, tokenID)
	ret0, _ := ret[0].([]model.NftTokenAttribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributeByCollectionAddressTokenID indicates an expected call of GetAttributeByCollectionAddressTokenID.
func (mr *MockINftMockRecorder) GetAttributeByCollectionAddressTokenID(collectionAddress, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributeByCollectionAddressTokenID", reflect.TypeOf((*MockINft)(nil).GetAttributeByCollectionAddressTokenID), collectionAddress, tokenID)
}

// GetAttributesByCollectionAddress mocks base method.
func (m *MockINft) GetAttributesByCollectionAddress(collectionAddress string) ([]model.NftTokenAttribute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttributesByCollectionAddress", collectionAddress)
	ret0, _ := ret[0].([]model.NftTokenAttribute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttributesByCollectionAddress indicates an expected call of GetAttributesByCollectionAddress.
func (mr *MockINftMockRecorder) GetAttributesByCollectionAddress(collectionAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttributesByCollectionAddress", reflect.TypeOf((*MockINft)(nil).GetAttributesByCollectionAddress), collectionAddress)
}

// GetCollections mocks base method.
func (m *MockINft) GetCollections(query nft.NftCollectionQuery) ([]model.NftCollection, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollections", query)
	ret0, _ := ret[0].([]model.NftCollection)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCollections indicates an expected call of GetCollections.
func (mr *MockINftMockRecorder) GetCollections(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollections", reflect.TypeOf((*MockINft)(nil).GetCollections), query)
}

// GetCollectionsByWalletAddress mocks base method.
func (m *MockINft) GetCollectionsByWalletAddress(query nft.WalletCollectionQuery) ([]model.NftCollection, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionsByWalletAddress", query)
	ret0, _ := ret[0].([]model.NftCollection)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCollectionsByWalletAddress indicates an expected call of GetCollectionsByWalletAddress.
func (mr *MockINftMockRecorder) GetCollectionsByWalletAddress(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionsByWalletAddress", reflect.TypeOf((*MockINft)(nil).GetCollectionsByWalletAddress), query)
}

// GetNftCollectionStats mocks base method.
func (m *MockINft) GetNftCollectionStats(collectionAddress string) ([]model.ViewNftCollectionStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftCollectionStats", collectionAddress)
	ret0, _ := ret[0].([]model.ViewNftCollectionStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNftCollectionStats indicates an expected call of GetNftCollectionStats.
func (mr *MockINftMockRecorder) GetNftCollectionStats(collectionAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftCollectionStats", reflect.TypeOf((*MockINft)(nil).GetNftCollectionStats), collectionAddress)
}

// GetNftListing mocks base method.
func (m *MockINft) GetNftListing(query nft.NftListingQuery) ([]*model.NftListing, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftListing", query)
	ret0, _ := ret[0].([]*model.NftListing)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNftListing indicates an expected call of GetNftListing.
func (mr *MockINftMockRecorder) GetNftListing(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftListing", reflect.TypeOf((*MockINft)(nil).GetNftListing), query)
}

// GetNftListingByTokenID mocks base method.
func (m *MockINft) GetNftListingByTokenID(collectionAddress, tokenID string) ([]model.NftListingMarketplace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftListingByTokenID", collectionAddress, tokenID)
	ret0, _ := ret[0].([]model.NftListingMarketplace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNftListingByTokenID indicates an expected call of GetNftListingByTokenID.
func (mr *MockINftMockRecorder) GetNftListingByTokenID(collectionAddress, tokenID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftListingByTokenID", reflect.TypeOf((*MockINft)(nil).GetNftListingByTokenID), collectionAddress, tokenID)
}

// GetNftMarketplaceCollection mocks base method.
func (m *MockINft) GetNftMarketplaceCollection(collectionAddress string) ([]model.NftListingMarketplace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftMarketplaceCollection", collectionAddress)
	ret0, _ := ret[0].([]model.NftListingMarketplace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNftMarketplaceCollection indicates an expected call of GetNftMarketplaceCollection.
func (mr *MockINftMockRecorder) GetNftMarketplaceCollection(collectionAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftMarketplaceCollection", reflect.TypeOf((*MockINft)(nil).GetNftMarketplaceCollection), collectionAddress)
}

// GetNftMarketplaceCollectionSnapshots mocks base method.
func (m *MockINft) GetNftMarketplaceCollectionSnapshots(query nft.NftTickerQuery) ([]model.NftMarketplaceCollectionSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftMarketplaceCollectionSnapshots", query)
	ret0, _ := ret[0].([]model.NftMarketplaceCollectionSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNftMarketplaceCollectionSnapshots indicates an expected call of GetNftMarketplaceCollectionSnapshots.
func (mr *MockINftMockRecorder) GetNftMarketplaceCollectionSnapshots(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftMarketplaceCollectionSnapshots", reflect.TypeOf((*MockINft)(nil).GetNftMarketplaceCollectionSnapshots), query)
}

// GetNftMetadataAttributesIcon mocks base method.
func (m *MockINft) GetNftMetadataAttributesIcon(query nft.NftAttributeIconQuery) ([]model.NftMetadataAttributesIcon, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftMetadataAttributesIcon", query)
	ret0, _ := ret[0].([]model.NftMetadataAttributesIcon)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNftMetadataAttributesIcon indicates an expected call of GetNftMetadataAttributesIcon.
func (mr *MockINftMockRecorder) GetNftMetadataAttributesIcon(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftMetadataAttributesIcon", reflect.TypeOf((*MockINft)(nil).GetNftMetadataAttributesIcon), query)
}

// GetNftTokenAttrWithSoulBound mocks base method.
func (m *MockINft) GetNftTokenAttrWithSoulBound(collectionAddress string) ([]model.NftTokenAttrSoulBound, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftTokenAttrWithSoulBound", collectionAddress)
	ret0, _ := ret[0].([]model.NftTokenAttrSoulBound)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNftTokenAttrWithSoulBound indicates an expected call of GetNftTokenAttrWithSoulBound.
func (mr *MockINftMockRecorder) GetNftTokenAttrWithSoulBound(collectionAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftTokenAttrWithSoulBound", reflect.TypeOf((*MockINft)(nil).GetNftTokenAttrWithSoulBound), collectionAddress)
}

// GetNftTokenTxHistory mocks base method.
func (m *MockINft) GetNftTokenTxHistory(collectionAddress, tokenId string) ([]model.NftTxHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftTokenTxHistory", collectionAddress, tokenId)
	ret0, _ := ret[0].([]model.NftTxHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNftTokenTxHistory indicates an expected call of GetNftTokenTxHistory.
func (mr *MockINftMockRecorder) GetNftTokenTxHistory(collectionAddress, tokenId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftTokenTxHistory", reflect.TypeOf((*MockINft)(nil).GetNftTokenTxHistory), collectionAddress, tokenId)
}

// GetNftTokens mocks base method.
func (m *MockINft) GetNftTokens(query nft.NftTokenQuery) ([]model.NftToken, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftTokens", query)
	ret0, _ := ret[0].([]model.NftToken)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNftTokens indicates an expected call of GetNftTokens.
func (mr *MockINftMockRecorder) GetNftTokens(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftTokens", reflect.TypeOf((*MockINft)(nil).GetNftTokens), query)
}

// GetPlatformsByCollectionAddress mocks base method.
func (m *MockINft) GetPlatformsByCollectionAddress(collectionAddress string) ([]model.MarketplacePlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformsByCollectionAddress", collectionAddress)
	ret0, _ := ret[0].([]model.MarketplacePlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformsByCollectionAddress indicates an expected call of GetPlatformsByCollectionAddress.
func (mr *MockINftMockRecorder) GetPlatformsByCollectionAddress(collectionAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformsByCollectionAddress", reflect.TypeOf((*MockINft)(nil).GetPlatformsByCollectionAddress), collectionAddress)
}

// GetSolanaMappingAddress mocks base method.
func (m *MockINft) GetSolanaMappingAddress(solscanId string) (*model.SolanaMappingAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSolanaMappingAddress", solscanId)
	ret0, _ := ret[0].(*model.SolanaMappingAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSolanaMappingAddress indicates an expected call of GetSolanaMappingAddress.
func (mr *MockINftMockRecorder) GetSolanaMappingAddress(solscanId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSolanaMappingAddress", reflect.TypeOf((*MockINft)(nil).GetSolanaMappingAddress), solscanId)
}

// GetTokensByWalletAddress mocks base method.
func (m *MockINft) GetTokensByWalletAddress(query nft.WalletTokenQuery) ([]model.NftToken, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokensByWalletAddress", query)
	ret0, _ := ret[0].([]model.NftToken)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTokensByWalletAddress indicates an expected call of GetTokensByWalletAddress.
func (mr *MockINftMockRecorder) GetTokensByWalletAddress(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokensByWalletAddress", reflect.TypeOf((*MockINft)(nil).GetTokensByWalletAddress), query)
}

// RefreshViewNFTCollectionAttributes mocks base method.
func (m *MockINft) RefreshViewNFTCollectionAttributes() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshViewNFTCollectionAttributes")
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshViewNFTCollectionAttributes indicates an expected call of RefreshViewNFTCollectionAttributes.
func (mr *MockINftMockRecorder) RefreshViewNFTCollectionAttributes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshViewNFTCollectionAttributes", reflect.TypeOf((*MockINft)(nil).RefreshViewNFTCollectionAttributes))
}

// RefreshViewNFTCollectionStats mocks base method.
func (m *MockINft) RefreshViewNFTCollectionStats() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshViewNFTCollectionStats")
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshViewNFTCollectionStats indicates an expected call of RefreshViewNFTCollectionStats.
func (mr *MockINftMockRecorder) RefreshViewNFTCollectionStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshViewNFTCollectionStats", reflect.TypeOf((*MockINft)(nil).RefreshViewNFTCollectionStats))
}

// RefreshViewNFTCollections mocks base method.
func (m *MockINft) RefreshViewNFTCollections() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshViewNFTCollections")
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshViewNFTCollections indicates an expected call of RefreshViewNFTCollections.
func (mr *MockINftMockRecorder) RefreshViewNFTCollections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshViewNFTCollections", reflect.TypeOf((*MockINft)(nil).RefreshViewNFTCollections))
}

// RefreshViewNFTTokens mocks base method.
func (m *MockINft) RefreshViewNFTTokens() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshViewNFTTokens")
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshViewNFTTokens indicates an expected call of RefreshViewNFTTokens.
func (mr *MockINftMockRecorder) RefreshViewNFTTokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshViewNFTTokens", reflect.TypeOf((*MockINft)(nil).RefreshViewNFTTokens))
}

// SaveListing mocks base method.
func (m *MockINft) SaveListing(listing *model.NftListing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveListing", listing)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveListing indicates an expected call of SaveListing.
func (mr *MockINftMockRecorder) SaveListing(listing interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveListing", reflect.TypeOf((*MockINft)(nil).SaveListing), listing)
}

// SaveNftCollection mocks base method.
func (m *MockINft) SaveNftCollection(nftCollection *model.NftCollection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNftCollection", nftCollection)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNftCollection indicates an expected call of SaveNftCollection.
func (mr *MockINftMockRecorder) SaveNftCollection(nftCollection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNftCollection", reflect.TypeOf((*MockINft)(nil).SaveNftCollection), nftCollection)
}

// SaveOwner mocks base method.
func (m *MockINft) SaveOwner(owner *model.NftOwner) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOwner", owner)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveOwner indicates an expected call of SaveOwner.
func (mr *MockINftMockRecorder) SaveOwner(owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOwner", reflect.TypeOf((*MockINft)(nil).SaveOwner), owner)
}

// SaveTransfer mocks base method.
func (m *MockINft) SaveTransfer(transfer *model.NftTransfer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTransfer", transfer)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTransfer indicates an expected call of SaveTransfer.
func (mr *MockINftMockRecorder) SaveTransfer(transfer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTransfer", reflect.TypeOf((*MockINft)(nil).SaveTransfer), transfer)
}

// SummarizeSnapshotCollection mocks base method.
func (m *MockINft) SummarizeSnapshotCollection(platformId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummarizeSnapshotCollection", platformId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SummarizeSnapshotCollection indicates an expected call of SummarizeSnapshotCollection.
func (mr *MockINftMockRecorder) SummarizeSnapshotCollection(platformId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummarizeSnapshotCollection", reflect.TypeOf((*MockINft)(nil).SummarizeSnapshotCollection), platformId)
}

// SummarizeSnapshotHolder mocks base method.
func (m *MockINft) SummarizeSnapshotHolder() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SummarizeSnapshotHolder")
	ret0, _ := ret[0].(error)
	return ret0
}

// SummarizeSnapshotHolder indicates an expected call of SummarizeSnapshotHolder.
func (mr *MockINftMockRecorder) SummarizeSnapshotHolder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SummarizeSnapshotHolder", reflect.TypeOf((*MockINft)(nil).SummarizeSnapshotHolder))
}

// UpdateAttributeCount mocks base method.
func (m *MockINft) UpdateAttributeCount(count uint64, address, traitType, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAttributeCount", count, address, traitType, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAttributeCount indicates an expected call of UpdateAttributeCount.
func (mr *MockINftMockRecorder) UpdateAttributeCount(count, address, traitType, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttributeCount", reflect.TypeOf((*MockINft)(nil).UpdateAttributeCount), count, address, traitType, value)
}

// UpdateListing mocks base method.
func (m *MockINft) UpdateListing(listing *model.NftListing) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateListing", listing)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateListing indicates an expected call of UpdateListing.
func (mr *MockINftMockRecorder) UpdateListing(listing interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateListing", reflect.TypeOf((*MockINft)(nil).UpdateListing), listing)
}

// UpdateOwnerByCollectionAddressTokenId mocks base method.
func (m *MockINft) UpdateOwnerByCollectionAddressTokenId(collectionAddress, tokenId, ownerAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOwnerByCollectionAddressTokenId", collectionAddress, tokenId, ownerAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOwnerByCollectionAddressTokenId indicates an expected call of UpdateOwnerByCollectionAddressTokenId.
func (mr *MockINftMockRecorder) UpdateOwnerByCollectionAddressTokenId(collectionAddress, tokenId, ownerAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOwnerByCollectionAddressTokenId", reflect.TypeOf((*MockINft)(nil).UpdateOwnerByCollectionAddressTokenId), collectionAddress, tokenId, ownerAddress)
}
